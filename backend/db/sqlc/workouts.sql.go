// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: workouts.sql

package db

import (
	"context"
	"time"
)

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO "workouts" (
    user_id, title, body, last_total_volume
) VALUES (
    (SELECT users.id FROM "users" WHERE users.id = $1), $2, $3, $4
) RETURNING id, user_id, title, body, last_total_volume
`

type CreateWorkoutParams struct {
	ID              int64     `json:"id"`
	Title           string    `json:"title"`
	Body            string    `json:"body"`
	LastTotalVolume time.Time `json:"last_total_volume"`
}

// CreateWorkout: returns a new workout, provided their email, password, and username
//
// returns: the new workout row
func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, createWorkout,
		arg.ID,
		arg.Title,
		arg.Body,
		arg.LastTotalVolume,
	)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.LastTotalVolume,
	)
	return i, err
}

const deleteAllWorkouts = `-- name: DeleteAllWorkouts :exec
DELETE FROM "workouts"
WHERE user_id = $1
`

// DeleteAllWorkouts: deletes All user's workouts
//
// returns: nothing! see https://docs.sqlc.dev/en/stable/reference/query-annotations.html for exec
func (q *Queries) DeleteAllWorkouts(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllWorkouts, userID)
	return err
}

const deleteSingleWorkout = `-- name: DeleteSingleWorkout :exec
DELETE FROM "workouts"
WHERE id = $1
`

// DeleteSingleWorkout: deletes a single user's workout
//
// returns: nothing! see https://docs.sqlc.dev/en/stable/reference/query-annotations.html for exec
func (q *Queries) DeleteSingleWorkout(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSingleWorkout, id)
	return err
}

const getUserWorkouts = `-- name: GetUserWorkouts :many
SELECT id, user_id, title, body, last_total_volume FROM "workouts"
WHERE user_id = $1
`

// GetUserWorkouts: returns a users workouts, provided their uid
//
// returns: the user's corresponding workout rows
func (q *Queries) GetUserWorkouts(ctx context.Context, userID int64) ([]Workout, error) {
	rows, err := q.db.QueryContext(ctx, getUserWorkouts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.LastTotalVolume,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkout = `-- name: GetWorkout :one
SELECT id, user_id, title, body, last_total_volume FROM "workouts"
WHERE id = $1 LIMIT 1
`

// GetWorkout: returns an existing workout, given workout id
//
// returns: the corresponding workout row
func (q *Queries) GetWorkout(ctx context.Context, id int64) (Workout, error) {
	row := q.db.QueryRowContext(ctx, getWorkout, id)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.LastTotalVolume,
	)
	return i, err
}

const updateBody = `-- name: UpdateBody :one
UPDATE "workouts"
SET body = $2
WHERE id = $1
RETURNING id, user_id, title, body, last_total_volume
`

type UpdateBodyParams struct {
	ID   int64  `json:"id"`
	Body string `json:"body"`
}

// UpdateBody: updates workout's body text given its workouts id
//
// returns: the workouts
func (q *Queries) UpdateBody(ctx context.Context, arg UpdateBodyParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, updateBody, arg.ID, arg.Body)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.LastTotalVolume,
	)
	return i, err
}

const updateLastWorkout = `-- name: UpdateLastWorkout :one
UPDATE "workouts"
SET last_total_volume = $2
WHERE id = $1
RETURNING id, user_id, title, body, last_total_volume
`

type UpdateLastWorkoutParams struct {
	ID              int64     `json:"id"`
	LastTotalVolume time.Time `json:"last_total_volume"`
}

// UpdateLastWorkout: updates workout's last workout time given its id
//
// returns: the workout's new corresponding row
func (q *Queries) UpdateLastWorkout(ctx context.Context, arg UpdateLastWorkoutParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, updateLastWorkout, arg.ID, arg.LastTotalVolume)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.LastTotalVolume,
	)
	return i, err
}

const updateTitle = `-- name: UpdateTitle :one
UPDATE "workouts"
SET title = $2
WHERE id = $1
RETURNING id, user_id, title, body, last_total_volume
`

type UpdateTitleParams struct {
	ID    int64  `json:"id"`
	Title string `json:"title"`
}

// UpdateTitle: updates workouts title given its id
//
// returns: the workout's new corresponding row
func (q *Queries) UpdateTitle(ctx context.Context, arg UpdateTitleParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, updateTitle, arg.ID, arg.Title)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.LastTotalVolume,
	)
	return i, err
}
