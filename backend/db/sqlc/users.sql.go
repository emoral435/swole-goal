// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "users" (
    email, password, username
) VALUES (
    $1, $2, $3
) RETURNING id, email, password, username, created_at, birthday
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// CreateUser: returns a new user, provided their email, password, and username
//
// returns: the new user row
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.Birthday,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "users"
WHERE id = $1
`

// DeleteUser: deletes a user given their uid
//
// returns: nothing! see https://docs.sqlc.dev/en/stable/reference/query-annotations.html for exec
func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, username, created_at, birthday FROM "users"
WHERE id = $1 LIMIT 1
`

// GetUser: returns a new user, provided their uid
//
// returns: the user's corresponding row
func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.Birthday,
	)
	return i, err
}

const getUserEmail = `-- name: GetUserEmail :one
SELECT id, email, password, username, created_at, birthday FROM "users"
WHERE email = $1 LIMIT 1
`

// GetUserEmail: returns an existing user, given their unique email
//
// returns: the user's corresponding row
func (q *Queries) GetUserEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.Birthday,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password, username, created_at, birthday FROM "users"
ORDER BY id
LIMIT
    1
    OFFSET 2
`

// ListUsers: returns all users in the database
//
// returns: all users
func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Username,
			&i.CreatedAt,
			&i.Birthday,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const numUsers = `-- name: NumUsers :one
SELECT COUNT(*) FROM "users"
`

// NumUsers: returns the number of users
//
// returns: the number of users
func (q *Queries) NumUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, numUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateBirthday = `-- name: UpdateBirthday :one
UPDATE "users"
SET birthday = $2
WHERE id = $1
RETURNING id, email, password, username, created_at, birthday
`

type UpdateBirthdayParams struct {
	ID       int64        `json:"id"`
	Birthday sql.NullTime `json:"birthday"`
}

// UpdateBirthday: updates user's birthday given their uid
//
// returns: the user's new corresponding row
func (q *Queries) UpdateBirthday(ctx context.Context, arg UpdateBirthdayParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateBirthday, arg.ID, arg.Birthday)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.Birthday,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE "users"
SET password = $2
WHERE id = $1
RETURNING id, email, password, username, created_at, birthday
`

type UpdatePasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

// UpdatePassword: updates user's password given their uid
//
// returns: the user's new corresponding row
func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updatePassword, arg.ID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.Birthday,
	)
	return i, err
}

const updatePasswordEmail = `-- name: UpdatePasswordEmail :one
UPDATE "users"
SET password = $2
WHERE email = $1
RETURNING id, email, password, username, created_at, birthday
`

type UpdatePasswordEmailParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// UpdatePasswordEmail: updates user's password given their email
//
// returns: the user's new corresponding row
func (q *Queries) UpdatePasswordEmail(ctx context.Context, arg UpdatePasswordEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updatePasswordEmail, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.Birthday,
	)
	return i, err
}

const updateUsername = `-- name: UpdateUsername :one
UPDATE "users"
SET username = $2
WHERE id = $1
RETURNING id, email, password, username, created_at, birthday
`

type UpdateUsernameParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

// UpdateUsername: updates user's username given their uid
//
// returns: the user's new corresponding row
func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsername, arg.ID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.Birthday,
	)
	return i, err
}

const updateUsernameEmail = `-- name: UpdateUsernameEmail :one
UPDATE "users"
SET username = $2
WHERE email = $1
RETURNING id, email, password, username, created_at, birthday
`

type UpdateUsernameEmailParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

// UpdateUsernameEmail: updates user's username given their email
//
// returns: the user's new corresponding row
func (q *Queries) UpdateUsernameEmail(ctx context.Context, arg UpdateUsernameEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsernameEmail, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Username,
		&i.CreatedAt,
		&i.Birthday,
	)
	return i, err
}
