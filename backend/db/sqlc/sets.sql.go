// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: sets.sql

package db

import (
	"context"
	"database/sql"
)

const createSet = `-- name: CreateSet :one
INSERT INTO "set" (
    exercise_id, reps, weight
) VALUES (
    (SELECT "workouts".id FROM "workouts" WHERE "workouts".id = $1), $2, $3
) RETURNING id, exercise_id, reps, weight
`

type CreateSetParams struct {
	ID     int64         `json:"id"`
	Reps   sql.NullInt64 `json:"reps"`
	Weight sql.NullInt64 `json:"weight"`
}

// CreateSet: returns a new set, providing:
// a exercise id, and reps and weights
//
// returns: the new set row
func (q *Queries) CreateSet(ctx context.Context, arg CreateSetParams) (Set, error) {
	row := q.db.QueryRowContext(ctx, createSet, arg.ID, arg.Reps, arg.Weight)
	var i Set
	err := row.Scan(
		&i.ID,
		&i.ExerciseID,
		&i.Reps,
		&i.Weight,
	)
	return i, err
}

const deleteAllSets = `-- name: DeleteAllSets :exec
DELETE FROM "set"
WHERE exercise_id = $1
`

// DeleteAllSets: deletes All exercises sets!
//
// returns: nothing! see https://docs.sqlc.dev/en/stable/reference/query-annotations.html for exec
func (q *Queries) DeleteAllSets(ctx context.Context, exerciseID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllSets, exerciseID)
	return err
}

const deleteSingleSet = `-- name: DeleteSingleSet :exec
DELETE FROM "set"
WHERE id = $1
`

// DeleteSingleSet: deletes a single exercises's set
//
// returns: nothing! see https://docs.sqlc.dev/en/stable/reference/query-annotations.html for exec
func (q *Queries) DeleteSingleSet(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSingleSet, id)
	return err
}

const getExerciseSets = `-- name: GetExerciseSets :many
SELECT id, exercise_id, reps, weight FROM "set"
WHERE exercise_id = $1
`

// GetExerciseSets: returns all exercises sets
//
// returns: the exercises corresponding sets
func (q *Queries) GetExerciseSets(ctx context.Context, exerciseID int64) ([]Set, error) {
	rows, err := q.db.QueryContext(ctx, getExerciseSets, exerciseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Set
	for rows.Next() {
		var i Set
		if err := rows.Scan(
			&i.ID,
			&i.ExerciseID,
			&i.Reps,
			&i.Weight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSet = `-- name: GetSet :one
SELECT id, exercise_id, reps, weight FROM "set"
WHERE id = $1 LIMIT 1
`

// GetSet: returns an existing Set, given Set id
//
// returns: the corresponding Set row
func (q *Queries) GetSet(ctx context.Context, id int64) (Set, error) {
	row := q.db.QueryRowContext(ctx, getSet, id)
	var i Set
	err := row.Scan(
		&i.ID,
		&i.ExerciseID,
		&i.Reps,
		&i.Weight,
	)
	return i, err
}

const updateSetRep = `-- name: UpdateSetRep :one
UPDATE "set"
SET reps = $2
WHERE id = $1
RETURNING id, exercise_id, reps, weight
`

type UpdateSetRepParams struct {
	ID   int64         `json:"id"`
	Reps sql.NullInt64 `json:"reps"`
}

// UpdateSetRep: updates sets reps given its id
//
// returns: the set's new corresponding row
func (q *Queries) UpdateSetRep(ctx context.Context, arg UpdateSetRepParams) (Set, error) {
	row := q.db.QueryRowContext(ctx, updateSetRep, arg.ID, arg.Reps)
	var i Set
	err := row.Scan(
		&i.ID,
		&i.ExerciseID,
		&i.Reps,
		&i.Weight,
	)
	return i, err
}

const updateSetWeight = `-- name: UpdateSetWeight :one
UPDATE "set"
SET weight = $2
WHERE id = $1
RETURNING id, exercise_id, reps, weight
`

type UpdateSetWeightParams struct {
	ID     int64         `json:"id"`
	Weight sql.NullInt64 `json:"weight"`
}

// UpdateSetWeight: updates set's weight given its id
//
// returns: the sets's new corresponding row
func (q *Queries) UpdateSetWeight(ctx context.Context, arg UpdateSetWeightParams) (Set, error) {
	row := q.db.QueryRowContext(ctx, updateSetWeight, arg.ID, arg.Weight)
	var i Set
	err := row.Scan(
		&i.ID,
		&i.ExerciseID,
		&i.Reps,
		&i.Weight,
	)
	return i, err
}
