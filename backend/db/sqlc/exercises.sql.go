// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: exercises.sql

package db

import (
	"context"
	"database/sql"
)

const createExercise = `-- name: CreateExercise :one
INSERT INTO "exercises" (
    workout_id, type, title, description, last_volume
) VALUES (
    (SELECT "workouts".id FROM "workouts" WHERE "workouts".id = $1), $2, $3, $4, $5
) RETURNING id, workout_id, type, title, description, last_volume
`

type CreateExerciseParams struct {
	ID          int64          `json:"id"`
	Type        string         `json:"type"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	LastVolume  int64          `json:"last_volume"`
}

// CreateExercise: returns a new exercise, providing:
// a workout id, type of exercise (chest, back, etc.), title, desc of exercise, and the last overall volume
//
// returns: the new exercise row
func (q *Queries) CreateExercise(ctx context.Context, arg CreateExerciseParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, createExercise,
		arg.ID,
		arg.Type,
		arg.Title,
		arg.Description,
		arg.LastVolume,
	)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.Type,
		&i.Title,
		&i.Description,
		&i.LastVolume,
	)
	return i, err
}

const deleteAllExercises = `-- name: DeleteAllExercises :exec
DELETE FROM "exercises"
WHERE workout_id = $1
`

// DeleteAllExercises: deletes All workout's exercises
//
// returns: nothing! see https://docs.sqlc.dev/en/stable/reference/query-annotations.html for exec
func (q *Queries) DeleteAllExercises(ctx context.Context, workoutID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllExercises, workoutID)
	return err
}

const deleteSingleExercise = `-- name: DeleteSingleExercise :exec
DELETE FROM "exercises"
WHERE id = $1
`

// DeleteSingleExercise: deletes a single workouts's exercise
//
// returns: nothing! see https://docs.sqlc.dev/en/stable/reference/query-annotations.html for exec
func (q *Queries) DeleteSingleExercise(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSingleExercise, id)
	return err
}

const getExercise = `-- name: GetExercise :one
SELECT id, workout_id, type, title, description, last_volume FROM "exercises"
WHERE id = $1 LIMIT 1
`

// GetExercise: returns an existing exercise, given exercise id
//
// returns: the corresponding exercise row
func (q *Queries) GetExercise(ctx context.Context, id int64) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, getExercise, id)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.Type,
		&i.Title,
		&i.Description,
		&i.LastVolume,
	)
	return i, err
}

const getWorkoutsExercise = `-- name: GetWorkoutsExercise :many
SELECT id, workout_id, type, title, description, last_volume FROM "exercises"
WHERE workout_id = $1
`

// GetWorkoutsExercise: returns all workouts exercises
//
// returns: the workouts corresponding exercise rows
func (q *Queries) GetWorkoutsExercise(ctx context.Context, workoutID int64) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutsExercise, workoutID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.WorkoutID,
			&i.Type,
			&i.Title,
			&i.Description,
			&i.LastVolume,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExerciseDescription = `-- name: UpdateExerciseDescription :one
UPDATE "exercises"
SET description = $2
WHERE id = $1
RETURNING id, workout_id, type, title, description, last_volume
`

type UpdateExerciseDescriptionParams struct {
	ID          int64          `json:"id"`
	Description sql.NullString `json:"description"`
}

// UpdateExerciseDescription: updates exercise's description text given its exercises id
//
// returns: the exercises new row
func (q *Queries) UpdateExerciseDescription(ctx context.Context, arg UpdateExerciseDescriptionParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, updateExerciseDescription, arg.ID, arg.Description)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.Type,
		&i.Title,
		&i.Description,
		&i.LastVolume,
	)
	return i, err
}

const updateExerciseLast = `-- name: UpdateExerciseLast :one
UPDATE "exercises"
SET last_volume = $2
WHERE id = $1
RETURNING id, workout_id, type, title, description, last_volume
`

type UpdateExerciseLastParams struct {
	ID         int64 `json:"id"`
	LastVolume int64 `json:"last_volume"`
}

// UpdateLastExercise: updates exercise's last exercise time given its id
//
// returns: the exercise's new corresponding row
func (q *Queries) UpdateExerciseLast(ctx context.Context, arg UpdateExerciseLastParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, updateExerciseLast, arg.ID, arg.LastVolume)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.Type,
		&i.Title,
		&i.Description,
		&i.LastVolume,
	)
	return i, err
}

const updateExerciseTitle = `-- name: UpdateExerciseTitle :one
UPDATE "exercises"
SET title = $2
WHERE id = $1
RETURNING id, workout_id, type, title, description, last_volume
`

type UpdateExerciseTitleParams struct {
	ID    int64  `json:"id"`
	Title string `json:"title"`
}

// UpdateExerciseTitle: updates exercises title given its id
//
// returns: the exercise's new corresponding row
func (q *Queries) UpdateExerciseTitle(ctx context.Context, arg UpdateExerciseTitleParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, updateExerciseTitle, arg.ID, arg.Title)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.Type,
		&i.Title,
		&i.Description,
		&i.LastVolume,
	)
	return i, err
}

const updateExerciseType = `-- name: UpdateExerciseType :one
UPDATE "exercises"
SET type = $2
WHERE id = $1
RETURNING id, workout_id, type, title, description, last_volume
`

type UpdateExerciseTypeParams struct {
	ID   int64  `json:"id"`
	Type string `json:"type"`
}

// UpdateExerciseType: updates exercises type given its id
//
// returns: the exercise's new corresponding row
func (q *Queries) UpdateExerciseType(ctx context.Context, arg UpdateExerciseTypeParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, updateExerciseType, arg.ID, arg.Type)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.WorkoutID,
		&i.Type,
		&i.Title,
		&i.Description,
		&i.LastVolume,
	)
	return i, err
}
